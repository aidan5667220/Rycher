{"ast":null,"code":"var _jsxFileName = \"/Users/aidanfischer/my-react-app/src/components/TypingText.js\",\n  _s = $RefreshSig$();\n// src/components/TypingText.js\nimport React, { useState, useEffect } from 'react';\nimport './TypingText.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TypingText({\n  text,\n  speed = 100\n}) {\n  _s();\n  const [displayedText, setDisplayedText] = useState('');\n  useEffect(() => {\n    // Reset displayedText when text prop changes.\n    setDisplayedText('');\n\n    // A flag to stop the recursive updates if the component unmounts.\n    let isMounted = true;\n    const typeLetter = i => {\n      if (!isMounted) return;\n      if (i < text.length) {\n        const newText = text.slice(0, i + 1);\n        console.log(`Index: ${i}, adding: \"${text.charAt(i)}\", newText: \"${newText}\"`);\n        setDisplayedText(newText);\n        setTimeout(() => typeLetter(i + 1), speed);\n      }\n    };\n\n    // Start typing from the first character.\n    typeLetter(0);\n\n    // Cleanup: stop recursion on unmount.\n    return () => {\n      isMounted = false;\n    };\n  }, [text, speed]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"typing-text\",\n    children: displayedText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n}\n_s(TypingText, \"PLbRMeWiJa2NBtcoy3qeXvmWyJg=\");\n_c = TypingText;\nexport default TypingText;\nvar _c;\n$RefreshReg$(_c, \"TypingText\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TypingText","text","speed","_s","displayedText","setDisplayedText","isMounted","typeLetter","i","length","newText","slice","console","log","charAt","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aidanfischer/my-react-app/src/components/TypingText.js"],"sourcesContent":["// src/components/TypingText.js\nimport React, { useState, useEffect } from 'react';\nimport './TypingText.css';\n\nfunction TypingText({ text, speed = 100 }) {\n  const [displayedText, setDisplayedText] = useState('');\n\n  useEffect(() => {\n    // Reset displayedText when text prop changes.\n    setDisplayedText('');\n\n    // A flag to stop the recursive updates if the component unmounts.\n    let isMounted = true;\n\n    const typeLetter = (i) => {\n      if (!isMounted) return;\n      if (i < text.length) {\n        const newText = text.slice(0, i + 1);\n        console.log(`Index: ${i}, adding: \"${text.charAt(i)}\", newText: \"${newText}\"`);\n        setDisplayedText(newText);\n        setTimeout(() => typeLetter(i + 1), speed);\n      }\n    };\n\n    // Start typing from the first character.\n    typeLetter(0);\n\n    // Cleanup: stop recursion on unmount.\n    return () => {\n      isMounted = false;\n    };\n  }, [text, speed]);\n\n  return <div className=\"typing-text\">{displayedText}</div>;\n}\n\nexport default TypingText;\n\n\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAAC;EAAEC,IAAI;EAAEC,KAAK,GAAG;AAAI,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd;IACAQ,gBAAgB,CAAC,EAAE,CAAC;;IAEpB;IACA,IAAIC,SAAS,GAAG,IAAI;IAEpB,MAAMC,UAAU,GAAIC,CAAC,IAAK;MACxB,IAAI,CAACF,SAAS,EAAE;MAChB,IAAIE,CAAC,GAAGP,IAAI,CAACQ,MAAM,EAAE;QACnB,MAAMC,OAAO,GAAGT,IAAI,CAACU,KAAK,CAAC,CAAC,EAAEH,CAAC,GAAG,CAAC,CAAC;QACpCI,OAAO,CAACC,GAAG,CAAC,UAAUL,CAAC,cAAcP,IAAI,CAACa,MAAM,CAACN,CAAC,CAAC,gBAAgBE,OAAO,GAAG,CAAC;QAC9EL,gBAAgB,CAACK,OAAO,CAAC;QACzBK,UAAU,CAAC,MAAMR,UAAU,CAACC,CAAC,GAAG,CAAC,CAAC,EAAEN,KAAK,CAAC;MAC5C;IACF,CAAC;;IAED;IACAK,UAAU,CAAC,CAAC,CAAC;;IAEb;IACA,OAAO,MAAM;MACXD,SAAS,GAAG,KAAK;IACnB,CAAC;EACH,CAAC,EAAE,CAACL,IAAI,EAAEC,KAAK,CAAC,CAAC;EAEjB,oBAAOH,OAAA;IAAKiB,SAAS,EAAC,aAAa;IAAAC,QAAA,EAAEb;EAAa;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAC3D;AAAClB,EAAA,CA9BQH,UAAU;AAAAsB,EAAA,GAAVtB,UAAU;AAgCnB,eAAeA,UAAU;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}